@using PantryTracker.Core.Models
@inject IJSRuntime JsRuntime

<div class="food-item-card">
    <div class="card-header">
        <div class="product-info">
            @if (!string.IsNullOrEmpty(Item.ImageUrl))
            {
                <img src="@Item.ImageUrl" alt="@Item.Name" class="product-image" />
            }
            <div class="product-details">
                @if (!string.IsNullOrEmpty(Item.Brand))
                {
                    <div class="brand">@Item.Brand</div>
                }
                <h4 class="item-name">@Item.Name</h4>
                @if (!string.IsNullOrEmpty(Item.Category))
                {
                    <span class="category">@Item.Category</span>
                }
                <span class="expiry-badge @GetExpiryBadgeClass()">
                    <i class="fas @GetExpiryIcon()"></i>
                    Expires: @Item.ExpiryDate.ToShortDateString()
                </span>
            </div>
        </div>
        <div class="header-actions">
            <button class="btn-icon" @onclick="() => OnEdit.InvokeAsync(Item.Id)" title="Edit Item">
                <i class="fas fa-edit"></i>
            </button>
            <button class="btn-icon" @onclick="HandleDelete" title="Delete Item">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </div>

    <div class="card-body">
        <div class="item-details">
            <div class="detail">
                <span class="label">Quantity</span>
                <span class="value">@Item.Quantity</span>
            </div>
            <div class="detail">
                <span class="label">Location</span>
                <span class="value">@Item.StorageLocation</span>
            </div>
        </div>

        @if (Item.NutritionalInfo != null)
        {
            <div class="nutritional-info">
                <div class="nutrient">
                    <div class="nutrient-label">Energy</div>
                    <div class="nutrient-value">@Item.NutritionalInfo.EnergyKcal kcal</div>
                </div>
                <div class="nutrient">
                    <div class="nutrient-label">Protein</div>
                    <div class="nutrient-value">@Item.NutritionalInfo.Proteins g</div>
                </div>
                <div class="nutrient">
                    <div class="nutrient-label">Carbs</div>
                    <div class="nutrient-value">@Item.NutritionalInfo.Carbohydrates g</div>
                </div>
                <div class="nutrient">
                    <div class="nutrient-label">Fat</div>
                    <div class="nutrient-value">@Item.NutritionalInfo.Fat g</div>
                </div>
            </div>
        }
    </div>
</div>


@code {
    [Parameter] public FoodItem Item { get; set; }
    [Parameter] public EventCallback<int> OnDelete { get; set; }
    [Parameter] public EventCallback<int> OnEdit { get; set; }

    private async Task HandleDelete()
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?"))
        {
            await OnDelete.InvokeAsync(Item.Id);
        }
    }

    private string GetExpiryBadgeClass()
    {
        var daysUntilExpiry = (Item.ExpiryDate - DateTime.Now).Days;
        return daysUntilExpiry switch
        {
            <= 7 => "badge-danger",
            <= 30 => "badge-warning",
            _ => "badge-success"
        };
    }

    private string GetExpiryIcon()
    {
        var daysUntilExpiry = (Item.ExpiryDate - DateTime.Now).Days;
        return daysUntilExpiry switch
        {
            <= 7 => "fa-exclamation-circle",
            <= 30 => "fa-clock",
            _ => "fa-check-circle"
        };
    }
}
