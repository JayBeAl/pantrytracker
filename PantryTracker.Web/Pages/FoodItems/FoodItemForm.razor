@page "/fooditems/new"
@page "/fooditems/edit/{Id:int}"
@using PantryTracker.Core.Interfaces
@using PantryTracker.Core.Models
@using PantryTracker.Web.Shared.Components
@inject IFoodItemService FoodItemService
@inject IOpenFoodFactsService OpenFoodFactsService
@inject NavigationManager NavigationManager

<div class="food-item-form">
    <div class="form-header">
        <h2>@(_isNew ? "Add New Item" : "Edit Item")</h2>
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <Alert Message="@_errorMessage" Type="AlertType.Error" />
    }

    @if (!string.IsNullOrEmpty(_successMessage))
    {
        <Alert Message="@_successMessage" Type="AlertType.Success" />
    }

    <EditForm Model="@_foodItem" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />

        <div class="form-section">
            <h3 class="section-title">Product Information</h3>

            <div class="form-group">
                <label for="barcode">Barcode</label>
                <div class="barcode-input">
                    <InputText id="barcode" @bind-Value="_foodItem.Barcode" class="form-control" />
                    <button type="button" class="btn btn-secondary" @onclick="ScanBarcode">
                        <i class="fas fa-barcode"></i>
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="LookupProduct">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
            </div>

            @if (_productFound && _foodItem.Product != null)
            {
                <div class="product-preview">
                    @if (!string.IsNullOrEmpty(_foodItem.Product.ImageUrl))
                    {
                        <img src="@_foodItem.Product.ImageUrl" alt="@_foodItem.Product.Name" class="product-image" />
                    }
                    <div class="product-info">
                        <div class="brand">@_foodItem.Product.Brand</div>
                        <h4>@_foodItem.Product.Name</h4>
                        <div class="category">@_foodItem.Product.Category</div>
                    </div>
                </div>
            }

            <div class="form-row">
                <div class="form-group">
                    <label for="quantity">Quantity</label>
                    <InputNumber id="quantity" @bind-Value="_foodItem.Quantity" class="form-control" />
                    <ValidationMessage For="@(() => _foodItem.Quantity)" />
                </div>
                <div class="form-group">
                    <label for="location">Storage Location</label>
                    <InputText id="location" @bind-Value="_foodItem.StorageLocation" class="form-control" />
                    <ValidationMessage For="@(() => _foodItem.StorageLocation)" />
                </div>
            </div>

            <div class="form-group">
                <label for="expiryDate">Expiry Date</label>
                <InputDate id="expiryDate" @bind-Value="_foodItem.ExpiryDate" class="form-control" />
                <ValidationMessage For="@(() => _foodItem.ExpiryDate)" />
            </div>
        </div>

        <div class="form-actions">
            <button type="submit" class="btn btn-primary" disabled="@_isProcessing">
                @if (_isProcessing)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Processing...</span>
                }
                else
                {
                    <span>Save</span>
                }
            </button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public int? Id { get; set; }
    private FoodItem _foodItem = new();
    private bool _isNew => Id == null;
    private string _errorMessage;
    private string _successMessage;
    private bool _isProcessing;
    private bool _productFound;

    protected override async Task OnInitializedAsync()
    {
        if (!_isNew)
        {
            _isProcessing = true;
            var result = await FoodItemService.GetByIdAsync(Id.Value);
            if (result.IsSuccess)
            {
                _foodItem = result.Value;
                _productFound = true;
            }
            else
            {
                _errorMessage = result.Error;
            }
            _isProcessing = false;
        }
    }

    private async Task LookupProduct()
    {
        if (string.IsNullOrWhiteSpace(_foodItem.Barcode))
        {
            _errorMessage = "Please enter a barcode first";
            return;
        }

        _isProcessing = true;
        _errorMessage = null;

        var result = await OpenFoodFactsService.GetProductByBarcodeAsync(_foodItem.Barcode);
        if (result.IsSuccess)
        {
            _productFound = true;
        }
        else
        {
            _errorMessage = result.Error;
            _productFound = false;
        }

        _isProcessing = false;
    }

    private async Task HandleSubmit()
    {
        _isProcessing = true;
        _errorMessage = null;
        _successMessage = null;

        if (_isNew)
        {
            var addResult = await FoodItemService.AddFoodItemAsync(_foodItem);
            if (addResult.IsSuccess)
            {
                _successMessage = "Item added successfully!";
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/fooditems");
            }
            else
            {
                _errorMessage = addResult.Error;
            }
        }
        else
        {
            var updateResult = await FoodItemService.UpdateFoodItemAsync(_foodItem);
            if (updateResult.IsSuccess)
            {
                _successMessage = "Item updated successfully!";
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/fooditems");
            }
            else
            {
                _errorMessage = updateResult.Error;
            }
        }

        _isProcessing = false;
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/fooditems");
    }

    private async Task ScanBarcode()
    {
        // Barcode scanning functionality will be implemented later
    }
}
