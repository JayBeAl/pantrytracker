@page "/fooditems"
@using Microsoft.AspNetCore.Authorization
@using PantryTracker.Core.Interfaces
@using PantryTracker.Core.Models
@using PantryTracker.WebAuth.Components.FoodItems.Components
@using PantryTracker.WebAuth.Components.Shared
@attribute [Authorize]
@rendermode InteractiveServer
@inject IFoodItemService FoodItemService
@inject NavigationManager NavigationManager

<PageTitle>Inventory</PageTitle>

<div class="page-header">
    <div class="header-content">
        <h1>Pantry Items</h1>
        <p class="text-muted">Manage your food inventory</p>
    </div>
    <button class="btn btn-primary" @onclick="AddNewItem">
        <i class="fas fa-plus me-2"></i> Add Item
    </button>
</div>

@if (_loading)
{
    <div class="loading-spinner">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(_errorMessage))
{
    <Alert Message="@_errorMessage" Type="AlertType.Error"/>
}
else if (!_foodItems.Any())
{
    <div class="empty-state">
        <i class="fas fa-box-open fa-3x mb-4"></i>
        <h3>No Items Yet</h3>
        <p>Start tracking your pantry items by adding your first item.</p>
        <button class="btn btn-primary mt-3" @onclick="AddNewItem">
            <i class="fas fa-plus me-2"></i> Add First Item
        </button>
    </div>
}
else
{
    @if (!string.IsNullOrEmpty(_successMessage))
    {
        <Alert Message="@_successMessage" Type="AlertType.Success"/>
    }

    <div class="food-items-grid">
        @foreach (var item in _foodItems)
        {
            <FoodItemCard
                Item="@item"
                OnDelete="@DeleteItem"
                OnEdit="@EditItem"/>
        }
    </div>
}


@code {
    private IEnumerable<FoodItem> _foodItems = new List<FoodItem>();
    private bool _loading = true;
    private string _errorMessage;
    private string _successMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadFoodItems();
    }

    private async Task LoadFoodItems()
    {
        _loading = true;
        _errorMessage = null;

        var result = await FoodItemService.GetAllAsync();
        if (result.IsSuccess)
        {
            _foodItems = result.Value;
        }
        else
        {
            _errorMessage = result.Error;
        }

        _loading = false;
    }

    private async Task DeleteItem(int id)
    {
        var result = await FoodItemService.DeleteFoodItemAsync(id);
        if (result.IsSuccess)
        {
            _successMessage = "Item deleted successfully!";
            await LoadFoodItems();
        }
        else
        {
            _errorMessage = result.Error;
        }
    }

    private void EditItem(int id)
    {
        NavigationManager.NavigateTo($"/fooditems/edit/{id}");
    }

    private void AddNewItem()
    {
        NavigationManager.NavigateTo("/fooditems/new");
    }

}
