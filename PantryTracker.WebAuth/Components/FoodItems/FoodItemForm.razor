@page "/fooditems/new"
@page "/fooditems/edit/{Id:int}"
@using PantryTracker.Core.Interfaces
@using PantryTracker.Core.Models
@using PantryTracker.WebAuth.Components.Shared
@rendermode InteractiveServer
@inject IFoodItemService FoodItemService
@inject IProductCacheRepository ProductCacheRepository
@inject NavigationManager NavigationManager

<PageTitle>Inventory Add/Edit</PageTitle>

<div class="food-item-form">
    <div class="form-header">
        <h2>@(_isNew ? "Add New Item" : "Edit Item")</h2>
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <Alert Message="@_errorMessage" Type="AlertType.Error"/>
    }

    @if (!string.IsNullOrEmpty(_successMessage))
    {
        <Alert Message="@_successMessage" Type="AlertType.Success"/>
    }

    <EditForm Model="@_foodItem" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-section">
            <h3 class="section-title">Product Information</h3>

            <div class="form-group">
                <label>Select Product</label>
                <div class="product-selection">
                    <select class="form-control" @bind="_selectedProductId">
                        <option value="">-- Select existing product --</option>
                        @foreach (var product in _cachedProducts)
                        {
                            <option value="@product.Id">@product.Brand @product.Name</option>
                        }
                    </select>
                    <button type="button" class="btn btn-secondary" @onclick="ToggleNewProductForm">
                        @if (_showNewProductForm)
                        {
                            <span><i class="fas fa-times"></i> Cancel</span>
                        }
                        else
                        {
                            <span><i class="fas fa-plus"></i> New Product</span>
                        }
                    </button>
                </div>
            </div>

            @if (_showNewProductForm)
            {
                <div class="new-product-form">
                    <div class="form-group">
                        <label>Product Name</label>
                        <InputText @bind-Value="_newProduct.Name" class="form-control"/>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>Brand</label>
                            <InputText @bind-Value="_newProduct.Brand" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label>Category</label>
                            <InputText @bind-Value="_newProduct.Category" class="form-control"
                                       placeholder="e.g. Dairy, Snacks"/>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>Energy (kcal)</label>
                            <InputNumber @bind-Value="_newProduct.EnergyKcal" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label>Protein (g)</label>
                            <InputNumber @bind-Value="_newProduct.Proteins" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label>Carbs (g)</label>
                            <InputNumber @bind-Value="_newProduct.Carbohydrates" class="form-control"/>
                        </div>
                        <div class="form-group">
                            <label>Fat (g)</label>
                            <InputNumber @bind-Value="_newProduct.Fat" class="form-control"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Image URL</label>
                        <InputText @bind-Value="_newProduct.ImageUrl" class="form-control"/>
                    </div>
                    <button type="button" class="btn btn-primary" @onclick="CreateNewProduct">
                        Save Product
                    </button>
                </div>
            }

            <div class="form-row">
                <div class="form-group">
                    <label>Quantity</label>
                    <InputNumber @bind-Value="_foodItem.Quantity" class="form-control"/>
                    <ValidationMessage For="@(() => _foodItem.Quantity)"/>
                </div>
                <div class="form-group">
                    <label>Storage Location</label>
                    <InputText @bind-Value="_foodItem.StorageLocation" class="form-control"/>
                    <ValidationMessage For="@(() => _foodItem.StorageLocation)"/>
                </div>
            </div>

            <div class="form-group">
                <label>Expiry Date</label>
                <InputDate @bind-Value="_foodItem.ExpiryDate" class="form-control"/>
                <ValidationMessage For="@(() => _foodItem.ExpiryDate)"/>
            </div>
        </div>

        <div class="form-actions">
            <button type="submit" class="btn btn-primary" disabled="@_isProcessing">
                @if (_isProcessing)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Processing...</span>
                }
                else
                {
                    <span>Save</span>
                }
            </button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public int? Id { get; set; }
    private FoodItem _foodItem = new() { ExpiryDate = DateTime.Now.AddDays(7) };
    private ProductCache _newProduct = new();
    private List<ProductCache> _cachedProducts = new();
    private bool _showNewProductForm;
    private string? _selectedProductId;
    private bool _isNew => Id == null;
    private string _errorMessage;
    private string _successMessage;
    private bool _isProcessing;

    protected override async Task OnInitializedAsync()
    {
        var result = await ProductCacheRepository.GetAllAsync();
        if (result.IsSuccess)
        {
            _cachedProducts = result.Value.OrderBy(p => p.Brand).ThenBy(p => p.Name).ToList();
        }

        if (!_isNew)
        {
            var itemResult = await FoodItemService.GetByIdAsync(Id.Value);
            if (itemResult.IsSuccess)
            {
                _foodItem = itemResult.Value;
                _selectedProductId = _foodItem.ProductId.ToString();
            }
        }
    }

    private void ToggleNewProductForm()
    {
        _showNewProductForm = !_showNewProductForm;
        if (_showNewProductForm)
        {
            _selectedProductId = null;
        }
    }

    private async Task CreateNewProduct()
    {
        if (string.IsNullOrWhiteSpace(_newProduct.Name))
        {
            _errorMessage = "Product name is required";
            return;
        }

        _isProcessing = true;
        _newProduct.CreatedAt = DateTime.UtcNow;
        _newProduct.LastUpdated = DateTime.UtcNow;

        var result = await ProductCacheRepository.AddAsync(_newProduct);
        if (result.IsSuccess)
        {
            _cachedProducts.Add(_newProduct);
            _selectedProductId = _newProduct.Id.ToString();
            _showNewProductForm = false;
            _newProduct = new();
            _successMessage = "Product created successfully";
        }
        else
        {
            _errorMessage = result.Error;
        }

        _isProcessing = false;
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrEmpty(_selectedProductId))
        {
            _errorMessage = "Please select a product";
            return;
        }

        _isProcessing = true;
        _errorMessage = null;
        _successMessage = null;

        var selectedProduct = _cachedProducts.FirstOrDefault(p => p.Id == int.Parse(_selectedProductId));
        if (selectedProduct != null)
        {
            _foodItem.ProductId = selectedProduct.Id;
            _foodItem.Product = selectedProduct;
        }

        if (_isNew)
        {
            var result = await FoodItemService.AddFoodItemAsync(_foodItem);
            if (result.IsSuccess)
            {
                _successMessage = "Item added successfully";
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/fooditems");
            }
            else
            {
                _errorMessage = result.Error;
            }
        }
        else
        {
            var result = await FoodItemService.UpdateFoodItemAsync(_foodItem);
            if (result.IsSuccess)
            {
                _successMessage = "Item updated successfully";
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/fooditems");
            }
            else
            {
                _errorMessage = result.Error;
            }
        }

        _isProcessing = false;
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/fooditems");
    }

}
